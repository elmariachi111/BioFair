# type Token @entity {
#   id: ID! # ipt address
#   name: String!
#   symbol: String!
#   decimals: BigInt!
#   # agreementCid: String! #IPFS CID string of FAM Agreement
#   # these will be updated by the underlying IPT subgraph template
#   #totalIssued: BigInt! #the highest amount of IPTs issued, this can be raised by the owner
#   #circulatingSupply: BigInt! #the amount of unburnt IPTs
#   lockedToken: TimelockedToken #the locked token that bidders partially receive when claiming
#   # balances: [Balance!] @derivedFrom(field: "token")
#   crowdsales: [CrowdSale!] @derivedFrom(field: "token")
# }

type Balance @entity {
  id: ID! # erc20address + owner address
  token: Token!
  balance: BigInt! # Token balance of the owner
  owner: Bytes! #Address of the token owner
  agreementSignature: Bytes #the agreement signature, to be reused for other operations
  schedules: [LockedSchedule!] @derivedFrom(field: "balance")
}

type Token @entity {
  id: Bytes!
  decimals: Int!
  symbol: String!
  name: String
  #the locked token that bidders partially receive when claiming
  lockedToken: TimelockedToken @derivedFrom(field: "underlyingToken")
}

type TimelockedToken @entity {
  id: Bytes!
  decimals: Int!
  symbol: String!
  name: String
  underlyingToken: Token
  schedules: [LockedSchedule!] @derivedFrom(field: "tokenContract")
}

type LockedSchedule @entity {
  id: Bytes!
  tokenContract: TimelockedToken!
  beneficiary: Bytes!
  amount: BigInt!
  expiresAt: BigInt!
  claimedAt: BigInt
  balance: Balance!
}


enum SaleState {
  UNKNOWN
  RUNNING
  SETTLED
  FAILED
}

enum SaleType {
  CROWDSALE
  STAKED_LOCKING_CROWDSALE
}

type CrowdSale @entity {
  id: ID!
  type: SaleType!
  token: Token!
  creator: Bytes! #address of the creator
  beneficiary: Bytes! #address of the receiver of fundingGoal (usually creator)
  closingTime: BigInt! #the time when the auction ends
  createdAt: BigInt! #the time when the auction was created
  state: SaleState!
  salesAmount: BigInt! #the amount of tokens to be auctioned
  auctionLockingDuration: BigInt # The duration for how long auction tokens are locked
  biddingToken: Token
  fundingGoal: BigInt! #the amount of tokens to be raised
  amountRaised: BigInt! #the amount of tokens raised so far
  stakingToken: Token
  amountStaked: BigInt! #the amount of tokens staked so far
  vestedStakingToken: Token #the vested staking token that bidders partially receive after claiming
  stakingDuration: BigInt # The duration for how long staked tokens are locked ("cliff" in vesting terms)
  wadFixedStakedPerBidPrice: BigInt # the fixed price of stake / bid token
  permissioner: Bytes #a crowdsale can be configured with an individual permissioner
  claimedAt: BigInt # the date when the auctioneer has claimed their return (depending on failed / settled sales)
  contributions: [Contribution!] @derivedFrom(field: "crowdSale")
  feeBp: Int # the percentage fee that will be cut from the crowdsale upon its success

}

type Contribution @entity {
  id: ID! #crowdsaleid-contributor
  contributor: Bytes!
  crowdSale: CrowdSale!
  amount: BigInt!
  stakedAmount: BigInt!
  price: BigInt # staking token vs. bidding token price
  createdAt: BigInt!
  claimedAt: BigInt
  claimedTx: String

  claimedTokens: BigInt
  claimedStakes: BigInt
  refundedTokens: BigInt
  refundedStakes: BigInt
}
